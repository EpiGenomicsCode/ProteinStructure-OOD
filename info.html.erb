<style>
.progress {
  height: 20px;
  margin: 10px 0;
  background-color: #f5f5f5;
  border-radius: 4px;
}

.progress-bar {
  background-color: #337ab7;
  color: white;
  text-align: center;
  line-height: 20px;
}

.job-status {
  margin: 20px 0;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.log-output {
  font-family: monospace;
  background-color: #f8f9fa;
  padding: 15px;
  border-radius: 4px;
  max-height: 400px;
  overflow-y: auto;
  white-space: pre-wrap;
  font-size: 12px;
}
</style>

<div class="alert alert-info">
  <h4>Protein Structure Prediction Job Information</h4>
  
  <% 
  def get_job_ids(session_id)
    output_log_path = staged_root.join('output.log')
    return nil unless File.exist?(output_log_path)
  
    log_content = File.read(output_log_path)
    cpu_id = log_content.match(/CPU job submitted with ID: (\d+)/)&.captures&.first
    gpu_id = log_content.match(/GPU job submitted with ID: (\d+)/)&.captures&.first
    
    return { cpu_id: cpu_id, gpu_id: gpu_id }
  end

  def get_cpu_phase_progress(log_content)
    return { phase: "Unknown", progress: 0, details: [] } unless log_content
  
    progress = 0
    phase = "CPU Phase - MSA Generation"
    details = []
  
    # Phase 1: Jackhmmer UniRef90 Search (25%)
    if log_content.include?('Started Jackhmmer (uniref90.fasta) query')
      progress = 10
      details << "Started UniRef90 search"
      
      if match = log_content.match(/Finished Jackhmmer \(uniref90\.fasta\) query in ([\d.]+) seconds/)
        progress = 25
        details << "Completed UniRef90 search in #{match[1]} seconds"
      end
    end
  
    # Phase 2: Jackhmmer MGnify Search (45%)
    if log_content.include?('Started Jackhmmer (mgy_clusters_2022_05.fa) query')
      progress = progress < 35 ? 35 : progress
      details << "Started MGnify search"
      
      if match = log_content.match(/Finished Jackhmmer \(mgy_clusters_2022_05\.fa\) query in ([\d.]+) seconds/)
        progress = 70
        details << "Completed MGnify search in #{match[1]} seconds"
      end
    end
  
    # Phase 3: HHblits Search (20%)
    if log_content.include?('Started HHblits query')
      progress = progress < 75 ? 75 : progress
      details << "Started HHblits search"
      
      if match = log_content.match(/Finished HHblits query in ([\d.]+) seconds/)
        progress = 90
        details << "Completed HHblits search in #{match[1]} seconds"
      end
    end
  
    # Phase 4: Template Search (10%)
    if log_content.include?('Searching for template')
      progress = progress < 95 ? 95 : progress
      details << "Searching for templates"
      
      if match = log_content.match(/Total number of templates.*?: (\d+)/)
        progress = 100
        details << "Found #{match[1]} templates"
      end
    end
  
    { phase: phase, progress: progress, details: details }
  end 

  def get_gpu_phase_progress(log_content)
    return { phase: "Unknown", progress: 0, details: [] } unless log_content
  
    progress = 0
    phase = "GPU Phase - Structure Prediction"
    details = []
    
    model_counts = {
      predictions: log_content.scan(/Running model model_\d+/).count,
      completed_predictions: log_content.scan(/Total JAX model model_\d+.*predict time/).count,
      completed_relaxations: log_content.scan(/Iteration completed: Einit.*Efinal/).count
    }
  
    if model_counts[:predictions] > 0
      # Each model is worth 20% (5 models total)
      # Within each 20%: 19% for prediction, 1% for relaxation
      completed_models = model_counts[:completed_predictions]
      completed_relaxations = model_counts[:completed_relaxations]
      
      prediction_progress = completed_models * 19
      relaxation_progress = completed_relaxations
      progress = prediction_progress + relaxation_progress
      
      details << "Completed #{completed_models}/5 model predictions"
      details << "Completed #{completed_relaxations}/5 model relaxations"
      
      # Add current phase detail
      if completed_models < 5
        current_model = completed_models + 1
        details << "Processing model #{current_model}/5"
      elsif completed_relaxations < 5
        current_relax = completed_relaxations + 1
        details << "Relaxing model #{current_relax}/5"
      end
    end
  
    { 
      phase: phase,
      progress: progress,
      details: details
    }
  end

  def get_job_status(working_dir, session_id)
    return {
      phase: 'Queued',
      progress: 0,
      details: [],
      cpu_log_content: '',
      gpu_log_content: '',
      script_status: 'queued'
    } unless working_dir

    output_log_path = staged_root.join('output.log')
    return {
      phase: 'Initializing',
      progress: 0,
      details: ['Session starting...'],
      cpu_log_content: '',
      gpu_log_content: '',
      script_status: 'initializing'
    } unless File.exist?(output_log_path)

    log_content = File.read(output_log_path)
    run_id_match = log_content.match(/job_status_(\d{8}_\d{6})\.txt/)
    return {
      phase: 'Initializing',
      progress: 0,
      details: ['Waiting for job initialization...'],
      cpu_log_content: '',
      gpu_log_content: '',
      script_status: 'initializing'
    } unless run_id_match

    run_id = run_id_match[1]
    status_file = "#{working_dir}/job_status_#{run_id}.txt"
    run_dir = "#{working_dir}/run_#{run_id}"
    
    job_ids = get_job_ids(session_id)
    
    script_status = File.exist?(status_file) ? File.read(status_file).strip : 'unknown'
    
    status = {
      phase: 'Unknown',
      progress: 0,
      details: [],
      cpu_log_content: '',
      gpu_log_content: '',
      script_status: script_status,
      run_dir: run_dir
    }

    if job_ids
      job_name = "alphafold_job_#{ENV['USER']}"
      log_dir = "#{run_dir}/logs/#{job_name}"
      
      if File.directory?(log_dir)
        cpu_log = Dir.glob("#{log_dir}/*_cpu_#{job_ids[:cpu_id]}.log").first
        gpu_log = Dir.glob("#{log_dir}/*_gpu_#{job_ids[:gpu_id]}.log").first
        
        if cpu_log && File.exist?(cpu_log)
          status[:cpu_log_content] = File.read(cpu_log)
          if status[:cpu_log_content].include?('Starting CPU job')
            cpu_status = get_cpu_phase_progress(status[:cpu_log_content])
            status[:phase] = cpu_status[:phase]
            status[:progress] = cpu_status[:progress]
            status[:details].concat(cpu_status[:details])
          end
        end
        
        if gpu_log && File.exist?(gpu_log)
          status[:gpu_log_content] = File.read(gpu_log)
          if status[:gpu_log_content].include?('Running model')
            gpu_status = get_gpu_phase_progress(status[:gpu_log_content])
            status[:phase] = gpu_status[:phase]
            status[:progress] = gpu_status[:progress]
            status[:details].concat(gpu_status[:details])
          end
        end
      end
    end
    
    status
  end
  
  working_dir = @user_context["working_directory"]
  status = get_job_status(working_dir, @id)  
  %>

  <div class="job-status">
    <h5>Current Status</h5>
    <p>Phase: <%= status[:phase] %></p>
    <div class="progress">
      <div class="progress-bar" role="progressbar" style="width: <%= status[:progress] %>%">
        <%= status[:progress] %>%
      </div>
    </div>
    
    <% if status[:details].any? %>
      <h5>Details</h5>
      <ul>
        <% status[:details].each do |detail| %>
          <li><%= detail %></li>
        <% end %>
      </ul>
    <% end %>

    <% if status[:cpu_log_content].present? %>
      <h5>CPU Phase Log</h5>
      <div class="log-output">
<%= status[:cpu_log_content] %>
      </div>
    <% end %>

    <% if status[:gpu_log_content].present? %>
      <h5>GPU Phase Log</h5>
      <div class="log-output">
<%= status[:gpu_log_content] %>
      </div>
    <% end %>
  </div>

  <h5>Job Output Location</h5>
  <p>Working Directory: 
    <a href="/pun/sys/dashboard/files/fs<%= working_dir %>" target="_blank">
      <%= working_dir %>
      <i class="fa fa-external-link"></i>
    </a>
  </p>
  
  <% if status[:run_dir] %>
    <p>Run Directory: 
      <a href="/pun/sys/dashboard/files/fs<%= status[:run_dir] %>" target="_blank">
        <%= status[:run_dir] %>
        <i class="fa fa-external-link"></i>
      </a>
    </p>
    <p>Output files will include:</p>
    <ul>
      <li>PDB structures: 
        <% if File.exist?("#{status[:run_dir]}/input/ranked_0.pdb") %>
          <a href="/pun/sys/dashboard/files/fs<%= status[:run_dir] %>/input/ranked_0.pdb?download=1" class="btn btn-sm btn-primary">
            <i class="fa fa-download"></i> Download Best Model
          </a>
        <% else %>
          <span class="text-muted">ranked_*.pdb files will be available in input/ when the GPU phase completes</span>
        <% end %>
      </li>
      
      <li>MSA files: 
        <% if status[:phase].include?("GPU Phase") || status[:script_status] == "completed" %>
          <a href="/pun/sys/dashboard/files/fs<%= status[:run_dir] %>/input/msas" target="_blank">
            <%= status[:run_dir] %>/input/msas/
            <i class="fa fa-external-link"></i>
          </a>
        <% else %>
          <span class="text-muted">MSA files will be available in input/msas/ after CPU phase completes</span>
        <% end %>
      </li>
      
      <li>Log files: 
        <a href="/pun/sys/dashboard/files/fs<%= status[:run_dir] %>/logs" target="_blank">
          <%= status[:run_dir] %>/logs/
          <i class="fa fa-external-link"></i>
        </a>
      </li>
      
      <li>Prediction results: 
        <% if Dir.glob("#{status[:run_dir]}/input/result_*.pkl").any? %>
          <a href="/pun/sys/dashboard/files/fs<%= status[:run_dir] %>/input?download=1&files[]=result_model_1.pkl" class="btn btn-sm btn-primary">
            <i class="fa fa-download"></i> Download Results
          </a>
        <% else %>
          <span class="text-muted">result_*.pkl files will be available in input/ when the GPU phase completes</span>
        <% end %>
      </li>
    </ul>

    <% if status[:script_status] == "completed" %>
      <div class="alert alert-success">
        <h5>Job Completed Successfully!</h5>
        <p>All output files are now available in the input/ directory.</p>
        <a href="/pun/sys/dashboard/files/fs<%= status[:run_dir] %>/input" class="btn btn-primary" target="_blank">
          <i class="fa fa-folder-open"></i> Browse All Files
        </a>
      </div>
    <% end %>
  <% else %>
    <p>Run directory will be created when the job starts...</p>
  <% end %>

</div>
